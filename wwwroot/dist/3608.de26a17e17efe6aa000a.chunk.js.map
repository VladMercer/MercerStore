{"version":3,"file":"3608.de26a17e17efe6aa000a.chunk.js","mappings":"4LAmCA,QA9BwB,WACpB,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,KAAjBD,aAMR,OACIE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mBAAkBC,SAAC,aACnCF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,cAAcG,MAAON,EAAcO,SAPlC,SAACC,GACxBV,GAASW,EAAAA,EAAAA,IAAUD,EAAME,OAAOJ,OACpC,EAK0FF,SAAA,EAC9EC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,GAAEF,SAAC,sBACjBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,SAAQF,SAAC,YACvBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,SAAQF,SAAC,aACvBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,OAAMF,SAAC,0BACrBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,UAASF,SAAC,eACxBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,QAAOF,SAAC,oBACtBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,SAAQF,SAAC,qBACvBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,YAAWF,SAAC,gBAC1BC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,WAAUF,SAAC,iBACzBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,WAAUF,SAAC,gBACzBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,UAASF,SAAC,iBACxBC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,aAAYF,SAAC,mBAC3BC,EAAAA,EAAAA,KAAA,UAAQC,MAAM,mBAAkBF,SAAC,yBAIjD,C,gDC/BaH,EAAW,WAGpB,IAAMU,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASH,KAAK,IACnDI,GAAaH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASC,UAAU,IAC7DC,GAAWJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASE,QAAQ,IACzDC,GAAaL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASG,UAAU,IAC7DC,GAAYN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASI,SAAS,IAC3DC,GAAaP,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASK,UAAU,IAC7DC,GAAWR,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASM,QAAQ,IACzDC,GAAcT,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASO,WAAW,IAC/DC,GAAmBV,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASQ,gBAAgB,IACzEC,GAASX,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASS,MAAM,IAG3D,MAAO,CACHC,OAHUZ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASU,KAAK,IAIrDb,MAAAA,EACAI,WAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACAC,OAAAA,EAER,C","sources":["webpack://mercerstore/./wwwroot/features/Admin/userPage/components/FilterComponent.jsx","webpack://mercerstore/./wwwroot/features/Admin/userPage/hooks/useUsers.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useUsers } from \"../hooks/useUsers\";\r\nimport { setFilter } from \"../redux/userPageSlice\";\r\n\r\nconst FilterComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const { statusFilter } = useUsers();\r\n\r\n    const handleFilterChange = (event) => {\r\n        dispatch(setFilter(event.target.value));\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group mb-3\">\r\n            <span className=\"input-group-text\">Фильтр:</span>\r\n            <select className=\"form-select\" value={statusFilter} onChange={handleFilterChange}>\r\n                <option value=\"\">Все пользователи</option>\r\n                <option value=\"Online\">Онлайн</option>\r\n                <option value=\"Ofline\">Оффлайн</option>\r\n                <option value=\"User\">Обычные пользователи</option>\r\n                <option value=\"Manager\">Менеджеры</option>\r\n                <option value=\"Admin\">Администраторы</option>\r\n                <option value=\"Banned\">Заблокированные</option>\r\n                <option value=\"HasReview\">С отзывами</option>\r\n                <option value=\"NoReview\">Без отзывов</option>\r\n                <option value=\"HasOrder\">С заказами</option>\r\n                <option value=\"NoOrder\">Без заказов</option>\r\n                <option value=\"CreateDate\">Дата создания</option>\r\n                <option value=\"LastActivityDate\">Дата активности</option>\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilterComponent;","import { useSelector } from 'react-redux';\r\n\r\nexport const useUsers = () => {\r\n\r\n    \r\n    const users = useSelector((state) => state.userPage.users);\r\n    const pageNumber = useSelector((state) => state.userPage.pageNumber);\r\n    const pageSize = useSelector((state) => state.userPage.pageSize);\r\n    const totalPages = useSelector((state) => state.userPage.totalPages);\r\n    const sortOrder = useSelector((state) => state.userPage.sortOrder);\r\n    const totalUsers = useSelector((state) => state.userPage.totalUsers);\r\n    const isLoaded = useSelector((state) => state.userPage.isLoaded);\r\n    const isPageReset = useSelector((state) => state.userPage.isPageReset);\r\n    const timePeriodFilter = useSelector((state) => state.userPage.timePeriodFilter);\r\n    const filter = useSelector((state) => state.userPage.filter);\r\n    const query = useSelector((state) => state.userPage.query);\r\n\r\n    return {\r\n        query,\r\n        users,\r\n        pageNumber,\r\n        pageSize,\r\n        totalPages,\r\n        sortOrder,\r\n        totalUsers,\r\n        isLoaded,\r\n        isPageReset,\r\n        timePeriodFilter,\r\n        filter,\r\n    };\r\n};"],"names":["dispatch","useDispatch","statusFilter","useUsers","_jsxs","className","children","_jsx","value","onChange","event","setFilter","target","users","useSelector","state","userPage","pageNumber","pageSize","totalPages","sortOrder","totalUsers","isLoaded","isPageReset","timePeriodFilter","filter","query"],"sourceRoot":""}