{"version":3,"file":"5609.db8b87f78ca950108500.chunk.js","mappings":"kSAwCA,QAnC4B,WACxB,I,EAAAA,GAAmCC,EAAAA,EAAAA,KAA3BC,EAAUF,EAAVE,WAAYC,EAAUH,EAAVG,WACdC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmB,SAACC,GAClBA,EAAgB,GAAKA,GAAiBJ,GACtCC,GAASI,EAAAA,EAAAA,IAAcD,GAE/B,EAEA,OACIE,EAAAA,EAAAA,KAAA,OAAK,aAAW,0BAAyBC,UACrCC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAIG,UAAS,aAAAC,OAAeX,GAAc,EAAI,WAAa,IAAKQ,UAC5DD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBJ,EAAa,EAAE,EAACQ,SAAC,a,EAIlFM,MAAMb,G,omBAAac,KAAI,SAACC,EAAGC,GAAC,OAC7BV,EAAAA,EAAAA,KAAA,MAAYG,UAAS,aAAAC,OAAeX,IAAeiB,EAAI,EAAI,SAAW,IAAKT,UACvED,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBa,EAAI,EAAE,EAACT,SACpES,EAAI,KAFJA,EAIJ,KAETV,EAAAA,EAAAA,KAAA,MAAIG,UAAS,aAAAC,OAAeX,GAAcC,EAAa,WAAa,IAAKO,UACrED,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBJ,EAAa,EAAE,EAACQ,SAAC,iBAOvG,C,gDCpCaT,EAAY,WAerB,MAAO,CACHmB,QAbWC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUH,MAAM,IAcxDlB,YAbemB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUrB,UAAU,IAchEsB,UAbaH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,QAAQ,IAc5DrB,YAbekB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUpB,UAAU,IAchEsB,WAbcJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUE,SAAS,IAc9DC,aAbgBL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUG,WAAW,IAclEC,UAbaN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUI,QAAQ,IAc5DC,aAbgBP,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUK,WAAW,IAclEC,kBAbqBR,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUM,gBAAgB,IAc5EC,cAbiBT,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUO,YAAY,IAcpEC,OAbUV,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUQ,KAAK,IAe9D,C","sources":["webpack://mercerstore/./wwwroot/features/Admin/orderPage/components/PaginationComponent.jsx","webpack://mercerstore/./wwwroot/features/Admin/orderPage/hooks/useOrders.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useOrders } from '../hooks/useOrders';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPageNumber } from '../redux/orderPageSlice';\r\n\r\nconst PaginationComponent = () => {\r\n    const { pageNumber, totalPages } = useOrders();\r\n    const dispatch = useDispatch();\r\n\r\n    const changePageNumber = (newPageNumber) => {\r\n        if (newPageNumber > 0 && newPageNumber <= totalPages) {\r\n            dispatch(setPageNumber(newPageNumber));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination\">\r\n                <li className={`page-item ${pageNumber <= 1 ? 'disabled' : ''}`}>\r\n                    <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(pageNumber - 1)}>\r\n                        Назад\r\n                    </a>\r\n                </li>\r\n                {[...Array(totalPages)].map((_, i) => (\r\n                    <li key={i} className={`page-item ${pageNumber === i + 1 ? 'active' : ''}`}>\r\n                        <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(i + 1)}>\r\n                            {i + 1}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                <li className={`page-item ${pageNumber >= totalPages ? 'disabled' : ''}`}>\r\n                    <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(pageNumber + 1)}>\r\n                        Вперёд\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default PaginationComponent;","import { useSelector } from 'react-redux';\r\n\r\nexport const useOrders = () => {\r\n\r\n    \r\n    const orders = useSelector((state) => state.orderPage.orders);\r\n    const pageNumber = useSelector((state) => state.orderPage.pageNumber);\r\n    const pageSize = useSelector((state) => state.orderPage.pageSize);\r\n    const totalPages = useSelector((state) => state.orderPage.totalPages);\r\n    const sortOrder = useSelector((state) => state.orderPage.sortOrder);\r\n    const totalOrders = useSelector((state) => state.orderPage.totalOrders);\r\n    const isLoaded = useSelector((state) => state.orderPage.isLoaded);\r\n    const isPageReset = useSelector((state) => state.orderPage.isPageReset);\r\n    const timePeriodFilter = useSelector((state) => state.orderPage.timePeriodFilter);\r\n    const statusFilter = useSelector((state) => state.orderPage.statusFilter);\r\n    const query = useSelector((state) => state.orderPage.query);\r\n\r\n    return {\r\n        orders,\r\n        pageNumber,\r\n        pageSize,\r\n        totalPages,\r\n        sortOrder,\r\n        totalOrders,\r\n        isLoaded,\r\n        isPageReset,\r\n        timePeriodFilter,\r\n        statusFilter,\r\n        query\r\n    };\r\n};"],"names":["_useOrders","useOrders","pageNumber","totalPages","dispatch","useDispatch","changePageNumber","newPageNumber","setPageNumber","_jsx","children","_jsxs","className","concat","href","onClick","Array","map","_","i","orders","useSelector","state","orderPage","pageSize","sortOrder","totalOrders","isLoaded","isPageReset","timePeriodFilter","statusFilter","query"],"sourceRoot":""}