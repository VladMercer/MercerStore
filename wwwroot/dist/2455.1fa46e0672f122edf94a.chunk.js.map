{"version":3,"file":"2455.1fa46e0672f122edf94a.chunk.js","mappings":"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","sources":["webpack://mercerstore/./wwwroot/features/reviews/components/ProductReviewsComponent.jsx","webpack://mercerstore/./wwwroot/features/reviews/hooks/useFetchReviews.jsx","webpack://mercerstore/./wwwroot/features/reviews/components/RemoveReviewComponent.jsx","webpack://mercerstore/./wwwroot/features/reviews/components/UpdateReviewComponent.jsx","webpack://mercerstore/./wwwroot/features/reviews/hooks/useReviews.jsx"],"sourcesContent":["import React from 'react';\r\nimport RemoveReviewComponent from './RemoveReviewComponent';\r\nimport UpdateReviewComponent from './UpdateReviewComponent';\r\nimport useFetchReviews from '../hooks/useFetchReviews';\r\nimport { useReviews } from '../hooks/useReviews';\r\n\r\nconst ProductReviewsComponent = () => {\r\n    useFetchReviews();\r\n    const {currentUserId, productReviews} = useReviews();\r\n\r\n    return (\r\n        <div>\r\n           \r\n            {productReviews.map(review => (\r\n                review && review.userName && review.date && (\r\n                    <div key={`${review.userId}`} className=\"card product-review mb-3\">\r\n                        <div className=\"card-body\">\r\n                            <div className=\"product-review-header\">\r\n                                <h5 className=\"card-title\">{review.userName}</h5>\r\n                                <span className=\"review-date\">{new Date(review.date).toLocaleDateString()}</span>\r\n                            </div>\r\n                            <div className=\"product-review-subheader\">\r\n                                <div className=\"product-rating mb-3\">\r\n                                    {[...Array(5)].map((star, i) => (\r\n                                        <i\r\n                                            key={i}\r\n                                            className={`fa-solid fa-star ${i < review.value ? 'active' : ''}`}\r\n                                        ></i>\r\n                                    ))}\r\n                                </div> \r\n                                \r\n                                <div className=\"review-buttons\">\r\n                                    {currentUserId === review.userId && (\r\n                                        <>\r\n                                            <UpdateReviewComponent />\r\n                                            <RemoveReviewComponent />\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-text\">\r\n                                <p>{review.reviewText}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductReviewsComponent;","import { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useReviews } from './useReviews';\r\n\r\nimport {\r\n    fetchProductReviews, fetchCurrentReview, fetchReviewsCount, fetchAvgProductRate, setProductId, fetchCurrentUserId, fetchCurrentUserRoles\r\n} from '../redux/reviewSlice';\r\n\r\nconst useFetchReviews = () => {\r\n    const { isLoaded, productId } = useReviews();\r\n    const dispatch = useDispatch();\r\n\r\n    const getProductIdFromPath = () => {\r\n\r\n        const pathParts = window.location.pathname.split('/');\r\n        dispatch(setProductId(pathParts[pathParts.length - 1]));\r\n     \r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isLoaded) {\r\n            getProductIdFromPath();\r\n        }\r\n        if (isLoaded) {\r\n            dispatch(fetchProductReviews(productId));\r\n            dispatch(fetchCurrentReview(productId));\r\n            dispatch(fetchReviewsCount(productId));\r\n            dispatch(fetchAvgProductRate(productId));\r\n            dispatch(fetchCurrentUserId());\r\n            dispatch(fetchCurrentUserRoles());\r\n        }\r\n    }, [isLoaded]);\r\n};\r\n\r\nexport default useFetchReviews;","import React from 'react';\r\nimport { useReviews } from '../hooks/useReviews';\r\nimport { removeReview } from '../redux/reviewSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst RemoveReviewComponent = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { productId } = useReviews();\r\n\r\n    const handleRemove = () => {\r\n        dispatch(removeReview(productId));\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <button className=\"remove-review-button\" onClick={handleRemove}>\r\n                <i className=\"fa-solid fa-trash-can\"></i>\r\n            </button>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RemoveReviewComponent;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useReviews } from '../hooks/useReviews';\r\nimport { updateReview } from '../redux/reviewSlice';\r\n\r\n\r\nconst UpdateReviewComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const { review } = useReviews();\r\n\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [reviewText, setReviewText] = useState(review?.reviewText || \"\");\r\n    const [rating, setRating] = useState(review?.value);\r\n    const modalRef = useRef(null);\r\n    const modalInstance = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (review) {\r\n            setReviewText(review?.reviewText || \"\");\r\n            setRating(review?.value || 1);\r\n        }\r\n    }, [review]);\r\n\r\n    const handleShow = () => {\r\n        setReviewText(review.reviewText || \"\");\r\n        setRating(review.value);\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        if (modalInstance.current) {\r\n            modalInstance.current.hide();\r\n        }\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const updatedReview = {\r\n            ...review,\r\n            productId: review.productId,\r\n            reviewText: reviewText,\r\n            value: rating,\r\n        };\r\n\r\n        dispatch(updateReview(updatedReview));\r\n        handleClose();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showModal && modalRef.current) {\r\n            modalInstance.current = new window.bootstrap.Modal(modalRef.current);\r\n            modalInstance.current.show();\r\n\r\n            modalRef.current.addEventListener('hidden.bs.modal', handleClose);\r\n\r\n            return () => {\r\n\r\n                modalRef.current.removeEventListener('hidden.bs.modal', handleClose);\r\n                modalInstance.current = null;\r\n            };\r\n        }\r\n    }, [showModal]);\r\n\r\n    return (\r\n        <>\r\n            <button className=\"update-review-button\" onClick={handleShow}>\r\n                <i className=\"fa-solid fa-pen\"></i>\r\n            </button>\r\n\r\n            <div className=\"modal fade\" ref={modalRef} tabIndex=\"-1\" aria-labelledby=\"modalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-lg modal-dialog-centered\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"modalLabel\">Редактировать отзыв</h5>\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={handleClose}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"reviewText\" className=\"form-label\">Опишите впечатления</label>\r\n                                    <textarea\r\n                                        id=\"reviewText\"\r\n                                        className=\"form-control\"\r\n                                        value={reviewText}\r\n                                        onChange={(e) => setReviewText(e.target.value)}\r\n                                        rows=\"3\"\r\n                                        placeholder=\"Место для отзыва\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <div className=\"update-review\">\r\n                                        <fieldset className=\"rating\">\r\n                                            <legend className=\"rating__caption\">Оцените продукт</legend>\r\n                                            <div className=\"rating__group\">\r\n                                                {[5, 4, 3, 2, 1].map((rate) => (\r\n                                                    <React.Fragment key={rate}>\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            id={`upd-rate${rate}`}\r\n                                                            value={rate}\r\n                                                            checked={rating === rate}\r\n                                                            onChange={() => setRating(rate)}\r\n                                                            className=\"rating__star-input\"\r\n                                                        />\r\n                                                        <label htmlFor={`upd-rate${rate}`} className=\"rating__star\">\r\n                                                            <i className=\"fa-solid fa-star\"></i>\r\n                                                        </label>\r\n                                                    </React.Fragment>\r\n                                                ))}\r\n                                            </div>\r\n                                        </fieldset>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"modal-footer justify-content-start\">\r\n                                    <button type=\"submit\" className=\"btn btn-outline-warning\">\r\n                                        Обновить отзыв\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateReviewComponent;","import { useSelector } from 'react-redux';\r\n\r\nexport const useReviews = () => {\r\n\r\n    const productId = useSelector((state) => state.reviews.productId);\r\n    const countReviews = useSelector((state) => state.reviews.countReviews);\r\n    const productReviews = useSelector((state) => state.reviews.productReviews);\r\n    const avgReviewRate = useSelector((state) => state.reviews.avgReviewRate);\r\n    const currentUserId = useSelector((state) => state.reviews.currentUserId);\r\n    const userRoles = useSelector((state) => state.reviews.userRoles);\r\n    const review = useSelector((state) => state.reviews.review);\r\n    const isLoaded = useSelector((state) => state.reviews.isLoaded);\r\n \r\n    return {\r\n        productId,\r\n        countReviews,\r\n        productReviews,\r\n        avgReviewRate,\r\n        currentUserId,\r\n        userRoles,\r\n        isLoaded,\r\n        review,\r\n    };\r\n};\r\n\r\n\r\n\r\n"],"names":["_useReviews","useReviews","isLoaded","productId","dispatch","useDispatch","useEffect","pathParts","window","location","pathname","split","setProductId","length","fetchProductReviews","fetchCurrentReview","fetchReviewsCount","fetchAvgProductRate","fetchCurrentUserId","fetchCurrentUserRoles","useFetchReviews","currentUserId","productReviews","_jsx","children","map","review","userName","date","className","_jsxs","Date","toLocaleDateString","Array","star","i","concat","value","userId","_Fragment","UpdateReviewComponent","RemoveReviewComponent","reviewText","onClick","removeReview","_useState2","_slicedToArray","useState","showModal","setShowModal","_useState4","setReviewText","_useState6","rating","setRating","modalRef","useRef","modalInstance","handleClose","current","hide","bootstrap","Modal","show","addEventListener","removeEventListener","ref","tabIndex","role","id","type","onSubmit","e","preventDefault","updatedReview","_objectSpread","updateReview","htmlFor","onChange","target","rows","placeholder","rate","React","checked","useSelector","state","reviews","countReviews","avgReviewRate","userRoles"],"sourceRoot":""}