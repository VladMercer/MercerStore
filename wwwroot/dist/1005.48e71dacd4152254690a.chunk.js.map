{"version":3,"file":"1005.48e71dacd4152254690a.chunk.js","mappings":"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","sources":["webpack://mercerstore/./wwwroot/features/Admin/orderPage/components/OrdersListComponent.jsx","webpack://mercerstore/./wwwroot/features/Admin/orderPage/hooks/useFetchOrders.jsx","webpack://mercerstore/./wwwroot/features/Admin/orderPage/hooks/useOrders.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useOrders } from '../hooks/useOrders';\r\nimport useFetchOrders from '../hooks/useFetchOrders';\r\n\r\nconst OrdersListComponent = () => {\r\n    useFetchOrders();\r\n    const { orders } = useOrders();\r\n\r\n    return (\r\n        <table className=\"table table-striped table-hover table-responsive-md table-sm\">\r\n            <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Контакты</th>\r\n                    <th className=\"text-center\">Адрес</th>\r\n                    <th className=\"text-center\">Даты</th>\r\n                    <th className=\"text-center\">Цена</th>\r\n                    <th className=\"text-center\">Статус</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {orders && orders.length > 0 ? (\r\n                    orders.map((order) => (\r\n                        <tr\r\n                            key={order.id}\r\n                            onClick={() => (window.location.href = `/admin/order/update/${order.id}`)}\r\n                            style={{ cursor: 'pointer', verticalAlign: 'middle' }}\r\n                        >\r\n                            <td>{order.id}</td>\r\n\r\n                            <td>\r\n                                <div>\r\n                                    <strong>Телефон:</strong> {order.phoneNumber}\r\n                                </div>\r\n                                {order.email && (\r\n                                    <div>\r\n                                        <strong>Email:</strong> {order.email}\r\n                                    </div>\r\n                                )}\r\n                            </td>\r\n\r\n                            <td className=\"text-truncate text-wrap\" style={{ maxWidth: '150px' }}>\r\n                                {order.address}\r\n                            </td>\r\n\r\n                            <td className=\"text-center\">\r\n                                <div>\r\n                                    <strong>Создан:</strong> {new Date(order.createDate).toLocaleDateString()}\r\n                                </div>\r\n                                {order.completedDate && (\r\n                                    <div>\r\n                                        <strong>Завершен:</strong> {new Date(order.completedDate).toLocaleDateString()}\r\n                                    </div>\r\n                                )}\r\n                            </td>\r\n                          \r\n                            <td className=\"text-center\">{order.totalOrderPrice} ₽</td>\r\n\r\n                            <td className=\"text-center\">{order.status}</td>\r\n                        </tr>\r\n                    ))\r\n                ) : (\r\n                    <tr>\r\n                        <td colSpan=\"6\" className=\"text-center\">\r\n                            Нет данных\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default OrdersListComponent;","import { useDispatch } from 'react-redux';\r\nimport { useEffect, useRef } from 'react';\r\nimport { setPageNumber, setIsPageReset, fetchOrders } from '../redux/orderPageSlice';\r\nimport { useOrders } from './useOrders';\r\n\r\n\r\nconst useFetchOrders = () => {\r\n    const dispatch = useDispatch();\r\n    const { pageNumber, pageSize, sortOrder, timePeriodFilter, statusFilter, isLoaded, isPageReset, query } = useOrders();\r\n\r\n    const prevSortOrder = useRef(sortOrder);\r\n    const prevQuery = useRef(prevQuery);\r\n\r\n    const dispatchFetchOrders = () => {\r\n        dispatch(fetchOrders({\r\n            pageNumber, pageSize, sortOrder, timePeriodFilter, statusFilter, query\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n            if (!isLoaded) {\r\n                dispatchFetchOrders();\r\n            }\r\n\r\n            else if (pageNumber > 1 && (sortOrder !== prevSortOrder.current || query !== prevQuery.current) && !isPageReset) {\r\n                dispatch(setPageNumber(1));\r\n                dispatch(setIsPageReset(true));\r\n            }\r\n\r\n            else if (!isPageReset || (isPageReset && pageNumber === 1)) {\r\n\r\n                dispatchFetchOrders();\r\n\r\n                if (isPageReset && pageNumber === 1) {\r\n                    dispatch(setIsPageReset(false));\r\n                }\r\n            }\r\n            prevQuery.current = query; \r\n            prevSortOrder.current = sortOrder;\r\n    }, [pageNumber, pageSize, sortOrder, timePeriodFilter, statusFilter, query]);\r\n};\r\n\r\nexport default useFetchOrders;","import { useSelector } from 'react-redux';\r\n\r\nexport const useOrders = () => {\r\n\r\n    \r\n    const orders = useSelector((state) => state.orderPage.orders);\r\n    const pageNumber = useSelector((state) => state.orderPage.pageNumber);\r\n    const pageSize = useSelector((state) => state.orderPage.pageSize);\r\n    const totalPages = useSelector((state) => state.orderPage.totalPages);\r\n    const sortOrder = useSelector((state) => state.orderPage.sortOrder);\r\n    const totalOrders = useSelector((state) => state.orderPage.totalOrders);\r\n    const isLoaded = useSelector((state) => state.orderPage.isLoaded);\r\n    const isPageReset = useSelector((state) => state.orderPage.isPageReset);\r\n    const timePeriodFilter = useSelector((state) => state.orderPage.timePeriodFilter);\r\n    const statusFilter = useSelector((state) => state.orderPage.statusFilter);\r\n    const query = useSelector((state) => state.orderPage.query);\r\n\r\n    return {\r\n        orders,\r\n        pageNumber,\r\n        pageSize,\r\n        totalPages,\r\n        sortOrder,\r\n        totalOrders,\r\n        isLoaded,\r\n        isPageReset,\r\n        timePeriodFilter,\r\n        statusFilter,\r\n        query\r\n    };\r\n};"],"names":["dispatch","_useOrders","pageNumber","pageSize","sortOrder","timePeriodFilter","statusFilter","isLoaded","isPageReset","query","prevSortOrder","prevQuery","dispatchFetchOrders","useDispatch","useOrders","useRef","fetchOrders","useEffect","current","setPageNumber","setIsPageReset","orders","_jsxs","className","children","_jsx","length","map","order","onClick","window","location","href","concat","id","style","cursor","verticalAlign","phoneNumber","email","maxWidth","address","Date","createDate","toLocaleDateString","completedDate","totalOrderPrice","status","colSpan","useSelector","state","orderPage","totalPages","totalOrders"],"sourceRoot":""}