{"version":3,"file":"699.ca270c340d1d7269b3f6.chunk.js","mappings":"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","sources":["webpack://mercerstore/./wwwroot/features/Admin/userPage/components/UsersListComponent.jsx","webpack://mercerstore/./wwwroot/features/Admin/userPage/hooks/useFetchUsers.jsx","webpack://mercerstore/./wwwroot/features/Admin/userPage/hooks/useUsers.jsx"],"sourcesContent":["import React, {useMemo} from 'react';\r\nimport {useUsers} from '../hooks/useUsers';\r\nimport useFetchUsers from '../hooks/useFetchUsers';\r\n\r\nconst UsersListComponent = () => {\r\n    useFetchUsers();\r\n    const {users} = useUsers();\r\n\r\n    const renderUsers = useMemo(() => {\r\n        if (!users || users.length === 0) {\r\n            return (\r\n                <tr>\r\n                    <td colSpan=\"6\" className=\"text-center\">\r\n                        Нет данных\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return users.map((user) => (\r\n            <tr\r\n                key={user.id}\r\n                onClick={() => (window.location.href = `/admin/user/update/${user.id}`)}\r\n                style={{cursor: 'pointer', verticalAlign: 'middle'}}\r\n            >\r\n                <td className=\"text-center\">\r\n                    {user.imageUrl ? (\r\n                        <img src={user.imageUrl} alt=\"User\" className=\"rounded-circle\" width=\"50\" height=\"50\"/>\r\n                    ) : (\r\n                        <span className=\"text-muted\">—</span>\r\n                    )}\r\n                </td>\r\n\r\n                <td className=\"text-start\">\r\n                    <div>\r\n                        <strong>Email:</strong> {user.email || '—'}\r\n                    </div>\r\n                    <div>\r\n                        <strong>Телефон:</strong> {user.phoneNumber || '—'}\r\n                    </div>\r\n                    <div>\r\n                        <strong>Адрес:</strong> {user.address || '—'}\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"text-start\">\r\n                    <div>\r\n                        <strong>Создан:</strong> {new Date(user.createDate).toLocaleDateString()}\r\n                    </div>\r\n                    {user.lastActivityDate && (\r\n                        <div>\r\n                            <strong>Активность:</strong> {new Date(user.lastActivityDate).toLocaleDateString()}\r\n                        </div>\r\n                    )}\r\n                </td>\r\n\r\n                <td className=\"text-start\">\r\n                    <div>\r\n                        <strong>Заказы:</strong> {user.countOrders ?? 0}\r\n                    </div>\r\n                    <div>\r\n                        <strong>Отзывы:</strong> {user.countReviews ?? 0}\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"text-start\">\r\n                    <div>\r\n                        <strong>Роли:</strong>{' '}\r\n                        {user.roles && user.roles.length > 0 ? user.roles.join(', ') : '—'}\r\n                    </div>\r\n                    <div>\r\n                        <strong>ID:</strong> {user.id || '—'}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        ));\r\n    }, [users]);\r\n\r\n    return (\r\n        <table className=\"table table-striped table-hover table-responsive-md table-sm\">\r\n            <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th className=\"text-center\">Фото</th>\r\n                <th className=\"text-center\">Контакты</th>\r\n                <th className=\"text-center\">Даты</th>\r\n                <th className=\"text-center\">Статистика</th>\r\n                <th className=\"text-center\">Роли</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>{renderUsers}</tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default UsersListComponent;","import {useDispatch} from 'react-redux';\r\nimport {useEffect, useRef} from 'react';\r\nimport {fetchUsers, setIsPageReset, setPageNumber} from '../redux/userPageSlice';\r\nimport {useUsers} from './useUsers';\r\n\r\n\r\nconst useFetchUsers = () => {\r\n    const dispatch = useDispatch();\r\n    const {pageNumber, pageSize, sortOrder, timePeriodFilter, filter, isLoaded, isPageReset, query} = useUsers();\r\n\r\n    const prevSortOrder = useRef(sortOrder);\r\n    const prevQuery = useRef(prevQuery);\r\n\r\n    const dispatchFetchUsers = () => {\r\n        dispatch(fetchUsers({\r\n            pageNumber, pageSize, sortOrder, timePeriodFilter, filter, query\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (!isLoaded) {\r\n            dispatchFetchUsers();\r\n        } else if (pageNumber > 1 && (sortOrder !== prevSortOrder.current || query !== prevQuery.current) && !isPageReset) {\r\n            dispatch(setPageNumber(1));\r\n            dispatch(setIsPageReset(true));\r\n        } else if (!isPageReset || (isPageReset && pageNumber === 1)) {\r\n\r\n            dispatchFetchUsers();\r\n\r\n            if (isPageReset && pageNumber === 1) {\r\n                dispatch(setIsPageReset(false));\r\n            }\r\n        }\r\n\r\n        prevSortOrder.current = sortOrder;\r\n        prevQuery.current = query;\r\n    }, [pageNumber, pageSize, sortOrder, timePeriodFilter, filter, query]);\r\n};\r\n\r\nexport default useFetchUsers;","import {useSelector} from 'react-redux';\r\n\r\nexport const useUsers = () => {\r\n\r\n\r\n    const users = useSelector((state) => state.userPage.users);\r\n    const pageNumber = useSelector((state) => state.userPage.pageNumber);\r\n    const pageSize = useSelector((state) => state.userPage.pageSize);\r\n    const totalPages = useSelector((state) => state.userPage.totalPages);\r\n    const sortOrder = useSelector((state) => state.userPage.sortOrder);\r\n    const totalUsers = useSelector((state) => state.userPage.totalUsers);\r\n    const isLoaded = useSelector((state) => state.userPage.isLoaded);\r\n    const isPageReset = useSelector((state) => state.userPage.isPageReset);\r\n    const timePeriodFilter = useSelector((state) => state.userPage.timePeriodFilter);\r\n    const filter = useSelector((state) => state.userPage.filter);\r\n    const query = useSelector((state) => state.userPage.query);\r\n\r\n    return {\r\n        query,\r\n        users,\r\n        pageNumber,\r\n        pageSize,\r\n        totalPages,\r\n        sortOrder,\r\n        totalUsers,\r\n        isLoaded,\r\n        isPageReset,\r\n        timePeriodFilter,\r\n        filter,\r\n    };\r\n};"],"names":["dispatch","_useUsers","pageNumber","pageSize","sortOrder","timePeriodFilter","filter","isLoaded","isPageReset","query","prevSortOrder","prevQuery","dispatchFetchUsers","useDispatch","useUsers","useRef","fetchUsers","useEffect","current","setPageNumber","setIsPageReset","users","renderUsers","useMemo","length","map","user","_user$countOrders","_user$countReviews","_jsxs","onClick","window","location","href","concat","id","style","cursor","verticalAlign","children","_jsx","className","imageUrl","src","alt","width","height","email","phoneNumber","address","Date","createDate","toLocaleDateString","lastActivityDate","countOrders","countReviews","roles","join","colSpan","useSelector","state","userPage","totalPages","totalUsers"],"sourceRoot":""}