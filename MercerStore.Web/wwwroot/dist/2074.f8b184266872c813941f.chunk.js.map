{"version":3,"file":"2074.f8b184266872c813941f.chunk.js","mappings":"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","sources":["webpack://mercerstore/./wwwroot/features/reviews/components/UpdateReviewComponent.jsx","webpack://mercerstore/./wwwroot/features/reviews/hooks/useReviews.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useReviews } from '../hooks/useReviews';\r\nimport { updateReview } from '../redux/reviewSlice';\r\n\r\n\r\nconst UpdateReviewComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const { review } = useReviews();\r\n\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [reviewText, setReviewText] = useState(review?.reviewText || \"\");\r\n    const [rating, setRating] = useState(review?.value);\r\n    const modalRef = useRef(null);\r\n    const modalInstance = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (review) {\r\n            setReviewText(review?.reviewText || \"\");\r\n            setRating(review?.value || 1);\r\n        }\r\n    }, [review]);\r\n\r\n    const handleShow = () => {\r\n        setReviewText(review.reviewText || \"\");\r\n        setRating(review.value);\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        if (modalInstance.current) {\r\n            modalInstance.current.hide();\r\n        }\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const updatedReview = {\r\n            ...review,\r\n            productId: review.productId,\r\n            reviewText: reviewText,\r\n            value: rating,\r\n        };\r\n\r\n        dispatch(updateReview(updatedReview));\r\n        handleClose();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showModal && modalRef.current) {\r\n            modalInstance.current = new window.bootstrap.Modal(modalRef.current);\r\n            modalInstance.current.show();\r\n\r\n            modalRef.current.addEventListener('hidden.bs.modal', handleClose);\r\n\r\n            return () => {\r\n\r\n                modalRef.current.removeEventListener('hidden.bs.modal', handleClose);\r\n                modalInstance.current = null;\r\n            };\r\n        }\r\n    }, [showModal]);\r\n\r\n    return (\r\n        <>\r\n            <button className=\"update-review-button\" onClick={handleShow}>\r\n                <i className=\"fa-solid fa-pen\"></i>\r\n            </button>\r\n\r\n            <div className=\"modal fade\" ref={modalRef} tabIndex=\"-1\" aria-labelledby=\"modalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-lg modal-dialog-centered\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"modalLabel\">Редактировать отзыв</h5>\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={handleClose}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"reviewText\" className=\"form-label\">Опишите впечатления</label>\r\n                                    <textarea\r\n                                        id=\"reviewText\"\r\n                                        className=\"form-control\"\r\n                                        value={reviewText}\r\n                                        onChange={(e) => setReviewText(e.target.value)}\r\n                                        rows=\"3\"\r\n                                        placeholder=\"Место для отзыва\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <div className=\"update-review\">\r\n                                        <fieldset className=\"rating\">\r\n                                            <legend className=\"rating__caption\">Оцените продукт</legend>\r\n                                            <div className=\"rating__group\">\r\n                                                {[5, 4, 3, 2, 1].map((rate) => (\r\n                                                    <React.Fragment key={rate}>\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            id={`upd-rate${rate}`}\r\n                                                            value={rate}\r\n                                                            checked={rating === rate}\r\n                                                            onChange={() => setRating(rate)}\r\n                                                            className=\"rating__star-input\"\r\n                                                        />\r\n                                                        <label htmlFor={`upd-rate${rate}`} className=\"rating__star\">\r\n                                                            <i className=\"fa-solid fa-star\"></i>\r\n                                                        </label>\r\n                                                    </React.Fragment>\r\n                                                ))}\r\n                                            </div>\r\n                                        </fieldset>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"modal-footer justify-content-start\">\r\n                                    <button type=\"submit\" className=\"btn btn-outline-warning\">\r\n                                        Обновить отзыв\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateReviewComponent;","import { useSelector } from 'react-redux';\r\n\r\nexport const useReviews = () => {\r\n\r\n    const productId = useSelector((state) => state.reviews.productId);\r\n    const countReviews = useSelector((state) => state.reviews.countReviews);\r\n    const productReviews = useSelector((state) => state.reviews.productReviews);\r\n    const avgReviewRate = useSelector((state) => state.reviews.avgReviewRate);\r\n    const currentUserId = useSelector((state) => state.reviews.currentUserId);\r\n    const userRoles = useSelector((state) => state.reviews.userRoles);\r\n    const review = useSelector((state) => state.reviews.review);\r\n    const isLoaded = useSelector((state) => state.reviews.isLoaded);\r\n \r\n    return {\r\n        productId,\r\n        countReviews,\r\n        productReviews,\r\n        avgReviewRate,\r\n        currentUserId,\r\n        userRoles,\r\n        isLoaded,\r\n        review,\r\n    };\r\n};\r\n\r\n\r\n\r\n"],"names":["dispatch","useDispatch","review","useReviews","_useState2","_slicedToArray","useState","showModal","setShowModal","_useState4","reviewText","setReviewText","_useState6","value","rating","setRating","modalRef","useRef","modalInstance","useEffect","handleClose","current","hide","window","bootstrap","Modal","show","addEventListener","removeEventListener","_jsxs","_Fragment","children","_jsx","className","onClick","ref","tabIndex","role","id","type","onSubmit","e","preventDefault","updatedReview","_objectSpread","productId","updateReview","htmlFor","onChange","target","rows","placeholder","map","rate","React","concat","checked","useSelector","state","reviews","countReviews","productReviews","avgReviewRate","currentUserId","userRoles","isLoaded"],"sourceRoot":""}