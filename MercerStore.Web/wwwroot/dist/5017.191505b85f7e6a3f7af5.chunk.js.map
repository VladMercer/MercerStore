{"version":3,"file":"5017.191505b85f7e6a3f7af5.chunk.js","mappings":"kSAwCA,QAnC4B,WACxB,I,EAAAA,GAAmCC,EAAAA,EAAAA,KAA3BC,EAAUF,EAAVE,WAAYC,EAAUH,EAAVG,WACdC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmB,SAACC,GAClBA,EAAgB,GAAKA,GAAiBJ,GACtCC,GAASI,EAAAA,EAAAA,IAAcD,GAE/B,EAEA,OACIE,EAAAA,EAAAA,KAAA,OAAK,aAAW,0BAAyBC,UACrCC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAIG,UAAS,aAAAC,OAAeX,GAAc,EAAI,WAAa,IAAKQ,UAC5DD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBJ,EAAa,EAAE,EAACQ,SAAC,a,EAIlFM,MAAMb,G,omBAAac,KAAI,SAACC,EAAGC,GAAC,OAC7BV,EAAAA,EAAAA,KAAA,MAAYG,UAAS,aAAAC,OAAeX,IAAeiB,EAAI,EAAI,SAAW,IAAKT,UACvED,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBa,EAAI,EAAE,EAACT,SACpES,EAAI,KAFJA,EAIJ,KAETV,EAAAA,EAAAA,KAAA,MAAIG,UAAS,aAAAC,OAAeX,GAAcC,EAAa,WAAa,IAAKO,UACrED,EAAAA,EAAAA,KAAA,KAAGG,UAAU,YAAYE,KAAK,IAAIC,QAAS,WAAF,OAAQT,EAAiBJ,EAAa,EAAE,EAACQ,SAAC,iBAOvG,C,gDCpCaT,EAAe,WAGxB,IAAMmB,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaH,SAAS,IAC/DlB,GAAamB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAarB,UAAU,IACjEsB,GAAWH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaC,QAAQ,IAC7DrB,GAAakB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAapB,UAAU,IACjEsB,GAAiBJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaE,cAAc,IACzEC,GAAWL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaG,QAAQ,IAC7DC,GAAcN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaI,WAAW,IAGzE,MAAO,CACHC,OAHUP,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAaK,KAAK,IAIzDR,UAAAA,EACAlB,WAAAA,EACAsB,SAAAA,EACArB,WAAAA,EACAsB,eAAAA,EACAC,SAAAA,EACAC,YAAAA,EAER,C","sources":["webpack://mercerstore/./wwwroot/features/Admin/supplierPage/components/PaginationComponent.jsx","webpack://mercerstore/./wwwroot/features/Admin/supplierPage/hooks/useSuppliers.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useSuppliers } from '../hooks/useSuppliers';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPageNumber } from '../redux/supplierPageSlice';\r\n\r\nconst PaginationComponent = () => {\r\n    const { pageNumber, totalPages } = useSuppliers();\r\n    const dispatch = useDispatch();\r\n\r\n    const changePageNumber = (newPageNumber) => {\r\n        if (newPageNumber > 0 && newPageNumber <= totalPages) {\r\n            dispatch(setPageNumber(newPageNumber));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination\">\r\n                <li className={`page-item ${pageNumber <= 1 ? 'disabled' : ''}`}>\r\n                    <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(pageNumber - 1)}>\r\n                        Назад\r\n                    </a>\r\n                </li>\r\n                {[...Array(totalPages)].map((_, i) => (\r\n                    <li key={i} className={`page-item ${pageNumber === i + 1 ? 'active' : ''}`}>\r\n                        <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(i + 1)}>\r\n                            {i + 1}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                <li className={`page-item ${pageNumber >= totalPages ? 'disabled' : ''}`}>\r\n                    <a className=\"page-link\" href=\"#\" onClick={() => changePageNumber(pageNumber + 1)}>\r\n                        Вперёд\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default PaginationComponent;","import { useSelector } from 'react-redux';\r\n\r\nexport const useSuppliers = () => {\r\n\r\n    \r\n    const suppliers = useSelector((state) => state.supplierPage.suppliers);\r\n    const pageNumber = useSelector((state) => state.supplierPage.pageNumber);\r\n    const pageSize = useSelector((state) => state.supplierPage.pageSize);\r\n    const totalPages = useSelector((state) => state.supplierPage.totalPages);\r\n    const totalSuppliers = useSelector((state) => state.supplierPage.totalSuppliers);\r\n    const isLoaded = useSelector((state) => state.supplierPage.isLoaded);\r\n    const isPageReset = useSelector((state) => state.supplierPage.isPageReset);\r\n    const query = useSelector((state) => state.supplierPage.query);\r\n\r\n    return {\r\n        query,\r\n        suppliers,\r\n        pageNumber,\r\n        pageSize,\r\n        totalPages,\r\n        totalSuppliers,\r\n        isLoaded,\r\n        isPageReset,\r\n    };\r\n};"],"names":["_useSuppliers","useSuppliers","pageNumber","totalPages","dispatch","useDispatch","changePageNumber","newPageNumber","setPageNumber","_jsx","children","_jsxs","className","concat","href","onClick","Array","map","_","i","suppliers","useSelector","state","supplierPage","pageSize","totalSuppliers","isLoaded","isPageReset","query"],"sourceRoot":""}