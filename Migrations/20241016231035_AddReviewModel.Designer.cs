// <auto-generated />
using System;
using MercerStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MercerStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241016231035_AddReviewModel")]
    partial class AddReviewModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.Property<int>("BrandsId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("BrandsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BrandCategory");
                });

            modelBuilder.Entity("MercerStore.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserImgUrl")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MercerStore.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MercerStore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MercerStore.Models.CartProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("MercerStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryImgUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.CaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accessories")
                        .HasColumnType("text");

                    b.Property<string>("BottomFanSupport")
                        .HasColumnType("text");

                    b.Property<bool>("BuiltInCardReader")
                        .HasColumnType("boolean");

                    b.Property<bool>("BuiltInPowerSupply")
                        .HasColumnType("boolean");

                    b.Property<bool>("CableManagementBehindMotherboardTray")
                        .HasColumnType("boolean");

                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompatibleMotherboardFormFactors")
                        .HasColumnType("text");

                    b.Property<string>("CompatiblePowerSupplyFormFactors")
                        .HasColumnType("text");

                    b.Property<bool>("CpuCoolerCutout")
                        .HasColumnType("boolean");

                    b.Property<int>("DriveBays5_25Count")
                        .HasColumnType("integer");

                    b.Property<bool>("DustFilters")
                        .HasColumnType("boolean");

                    b.Property<int>("External3_5DriveBaysCount")
                        .HasColumnType("integer");

                    b.Property<string>("FrontFanSupport")
                        .HasColumnType("text");

                    b.Property<string>("FrontPanelMaterial")
                        .HasColumnType("text");

                    b.Property<string>("FrontRadiatorSizes")
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HorizontalExpansionSlotsCount")
                        .HasColumnType("integer");

                    b.Property<string>("IOConnectors")
                        .HasColumnType("text");

                    b.Property<string>("IOPanelLocation")
                        .HasColumnType("text");

                    b.Property<string>("IncludedFans")
                        .HasColumnType("text");

                    b.Property<int>("Internal2_5DriveBaysCount")
                        .HasColumnType("integer");

                    b.Property<int>("Internal3_5DriveBaysCount")
                        .HasColumnType("integer");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LightingColor")
                        .HasColumnType("text");

                    b.Property<string>("LightingConnector")
                        .HasColumnType("text");

                    b.Property<string>("LightingControl")
                        .HasColumnType("text");

                    b.Property<string>("LightingSource")
                        .HasColumnType("text");

                    b.Property<string>("LightingType")
                        .HasColumnType("text");

                    b.Property<bool>("LiquidCoolingSupport")
                        .HasColumnType("boolean");

                    b.Property<bool>("LowNoiseAntiVibrationCases")
                        .HasColumnType("boolean");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxCpuCoolerHeight")
                        .HasColumnType("text");

                    b.Property<string>("MaxGpuLength")
                        .HasColumnType("text");

                    b.Property<string>("MaxPowerSupplyLength")
                        .HasColumnType("text");

                    b.Property<string>("MetalThickness")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherboardOrientation")
                        .HasColumnType("text");

                    b.Property<string>("PowerSupplyPlacement")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("RearFanSupport")
                        .HasColumnType("text");

                    b.Property<string>("RearRadiatorSizes")
                        .HasColumnType("text");

                    b.Property<bool>("SidePanelFixationScrews")
                        .HasColumnType("boolean");

                    b.Property<bool>("SidePanelWindow")
                        .HasColumnType("boolean");

                    b.Property<string>("TopFanSupport")
                        .HasColumnType("text");

                    b.Property<string>("TopRadiatorSizes")
                        .HasColumnType("text");

                    b.Property<int>("VerticalExpansionSlotsCount")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WindowMaterial")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CaseDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.CoolingSystemDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseMaterial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BearingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FanColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FanConnector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FanDimensions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FansIncludedCount")
                        .HasColumnType("integer");

                    b.Property<string>("HeatPipeDiameter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HeatPipesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<string>("Length")
                        .HasColumnType("text");

                    b.Property<string>("LightingType")
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MaxAirflow")
                        .HasColumnType("double precision");

                    b.Property<int>("MaxFansCount")
                        .HasColumnType("integer");

                    b.Property<double>("MaxNoiseLevel")
                        .HasColumnType("double precision");

                    b.Property<int>("MaxRotationSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("MinRotationSpeed")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MountingKit")
                        .HasColumnType("text");

                    b.Property<bool>("NickelPlating")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("RadiatorColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RadiatorMaterial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RatedCurrent")
                        .HasColumnType("double precision");

                    b.Property<int>("RatedVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("RotationSpeedControl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocketCompatibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TDP")
                        .HasColumnType("integer");

                    b.Property<bool>("ThermalPasteIncluded")
                        .HasColumnType("boolean");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<string>("Width")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("CoolingSystemDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.MotherboardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ARGBConnector5V_D_G")
                        .HasColumnType("boolean");

                    b.Property<bool>("ActiveCooling")
                        .HasColumnType("boolean");

                    b.Property<int?>("AnalogAudioPorts")
                        .HasColumnType("integer");

                    b.Property<string>("AudioChipset")
                        .HasColumnType("text");

                    b.Property<string>("AudioScheme")
                        .HasColumnType("text");

                    b.Property<string>("BluetoothVersion")
                        .HasColumnType("text");

                    b.Property<bool>("BoardLighting")
                        .HasColumnType("boolean");

                    b.Property<string>("BoxHeight")
                        .HasColumnType("text");

                    b.Property<string>("BoxLength")
                        .HasColumnType("text");

                    b.Property<string>("BoxWeight")
                        .HasColumnType("text");

                    b.Property<string>("BoxWidth")
                        .HasColumnType("text");

                    b.Property<int?>("CPUFanPowerConnectors")
                        .HasColumnType("integer");

                    b.Property<string>("CPUPowerConnector")
                        .HasColumnType("text");

                    b.Property<int?>("CaseFanPowerConnectors3Pin")
                        .HasColumnType("integer");

                    b.Property<int?>("CaseFanPowerConnectors4Pin")
                        .HasColumnType("integer");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompatibleIntelCores")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalUSBTypeAPorts")
                        .HasColumnType("text");

                    b.Property<bool?>("InternalUSBTypeCPort")
                        .HasColumnType("boolean");

                    b.Property<string>("LightingSyncSoftware")
                        .HasColumnType("text");

                    b.Property<string>("M2PCIeProcessorLines")
                        .HasColumnType("text");

                    b.Property<int?>("M2Slots")
                        .HasColumnType("integer");

                    b.Property<string>("MainPowerConnector")
                        .HasColumnType("text");

                    b.Property<string>("MaxMemoryFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxMemoryVolume")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemoryChannels")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryFormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemorySlots")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NVMePCIeVersion")
                        .HasColumnType("text");

                    b.Property<bool?>("NVMeSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("NetworkAdapter")
                        .HasColumnType("text");

                    b.Property<string>("NetworkSpeed")
                        .HasColumnType("text");

                    b.Property<bool>("OnBoardButtons")
                        .HasColumnType("boolean");

                    b.Property<string>("PCIeSlots")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PCIeVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PCIeX1Slots")
                        .HasColumnType("integer");

                    b.Property<string>("PackageContents")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassiveCooling")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerPhaseCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("RGBConnector12V_G_R_B")
                        .HasColumnType("integer");

                    b.Property<int?>("RJ45Ports")
                        .HasColumnType("integer");

                    b.Property<bool?>("RS232Connector")
                        .HasColumnType("boolean");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int?>("SATAPorts")
                        .HasColumnType("integer");

                    b.Property<bool?>("SATA_RAIDSupport")
                        .HasColumnType("boolean");

                    b.Property<int>("SLICrossFireCards")
                        .HasColumnType("integer");

                    b.Property<bool>("SLICrossFireSupport")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SPDIFPort")
                        .HasColumnType("boolean");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("USBTypeAPorts")
                        .HasColumnType("text");

                    b.Property<bool?>("USBTypeCPort")
                        .HasColumnType("boolean");

                    b.Property<string>("VideoOutputs")
                        .HasColumnType("text");

                    b.Property<bool?>("WiFiStandard")
                        .HasColumnType("boolean");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WirelessAdapter")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WirelessModuleM2")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("MotherboardDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.PowerSupplyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BraidedCables")
                        .HasColumnType("boolean");

                    b.Property<string>("CPUCableLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPUConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CableColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoolingSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentOn12VLine")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentOn3_3VLine")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentOn5VLine")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentOnNegative12VLine")
                        .HasColumnType("integer");

                    b.Property<string>("FanControl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FanSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPUCableLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPUPowerConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<bool>("HybridMode")
                        .HasColumnType("boolean");

                    b.Property<string>("InputVoltageRange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Length")
                        .HasColumnType("text");

                    b.Property<string>("LightingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainCableLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainPowerConnector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModularCables")
                        .HasColumnType("boolean");

                    b.Property<string>("MolexCableLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MolexPowerConnectors")
                        .HasColumnType("integer");

                    b.Property<string>("PackageContents")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlusCertification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PowerCableIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("PowerFactorCorrection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerOn12VLine")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProtectionTechnologies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SataCableLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SataPowerConnectors")
                        .HasColumnType("integer");

                    b.Property<string>("StandardCompliance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StandbyCurrent5V")
                        .HasColumnType("integer");

                    b.Property<int>("Wattage")
                        .HasColumnType("integer");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<string>("Width")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("PowerSupplyDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.ProcessorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CoolingSystemIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Core")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("ECCSupport")
                        .HasColumnType("boolean");

                    b.Property<int>("EnergyEfficientCores")
                        .HasColumnType("integer");

                    b.Property<bool?>("IntegratedGraphics")
                        .HasColumnType("boolean");

                    b.Property<string>("L2Cache")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("L3Cache")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxSupportedMemory")
                        .HasColumnType("text");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("integer");

                    b.Property<int>("MaxThreads")
                        .HasColumnType("integer");

                    b.Property<string>("MaxTurboFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MemoryChannels")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryFrequency")
                        .HasColumnType("text");

                    b.Property<string>("MemoryType")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PCIeController")
                        .HasColumnType("text");

                    b.Property<int?>("PCIeLanes")
                        .HasColumnType("integer");

                    b.Property<int>("PerformanceCores")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TDP")
                        .HasColumnType("integer");

                    b.Property<string>("TechnologyProcess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ThermalInterfaceIncluded")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalCores")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProcessorDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.RamDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivateToPrechargeDelay")
                        .HasColumnType("integer");

                    b.Property<int?>("CASLatency")
                        .HasColumnType("integer");

                    b.Property<bool?>("ECCMemory")
                        .HasColumnType("boolean");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<bool?>("LowProfile")
                        .HasColumnType("boolean");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemoryFormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModuleCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ModuleMemoryVolume")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("RASToCASDelay")
                        .HasColumnType("integer");

                    b.Property<string>("RadiatorColor")
                        .HasColumnType("text");

                    b.Property<bool?>("RadiatorPresence")
                        .HasColumnType("boolean");

                    b.Property<string>("RankType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("RegisteredMemory")
                        .HasColumnType("boolean");

                    b.Property<int?>("RowPrechargeDelay")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalMemoryVolume")
                        .HasColumnType("integer");

                    b.Property<string>("Voltage")
                        .HasColumnType("text");

                    b.Property<string>("XMPProfiles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("RamDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.StorageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BitsPerCell")
                        .HasColumnType("text");

                    b.Property<int>("CapacityGB")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<bool?>("DRAMBuffer")
                        .HasColumnType("boolean");

                    b.Property<int?>("DRAMBufferSizeMB")
                        .HasColumnType("integer");

                    b.Property<double?>("DWPD")
                        .HasColumnType("double precision");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Length")
                        .HasColumnType("text");

                    b.Property<string>("M2Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxSequentialReadSpeed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaxSequentialWriteSpeed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemoryStructure")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NVMe")
                        .HasColumnType("boolean");

                    b.Property<string>("PhysicalInterface")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PowerConsumption")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool?>("RadiatorIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("TBW")
                        .HasColumnType("text");

                    b.Property<string>("Thickness")
                        .HasColumnType("text");

                    b.Property<int?>("WeightGrams")
                        .HasColumnType("integer");

                    b.Property<string>("Width")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("StorageDetail");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.VideoCardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ALUs")
                        .HasColumnType("integer");

                    b.Property<int>("BaseClockMHz")
                        .HasColumnType("integer");

                    b.Property<int>("BoostClockMHz")
                        .HasColumnType("integer");

                    b.Property<string>("ConnectionFormFactor")
                        .HasColumnType("text");

                    b.Property<string>("CoolingType")
                        .HasColumnType("text");

                    b.Property<string>("DimensionsBracket")
                        .HasColumnType("text");

                    b.Property<string>("DisplayConnectors")
                        .HasColumnType("text");

                    b.Property<string>("DisplayPortVersion")
                        .HasColumnType("text");

                    b.Property<string>("FabricationProcess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FanCount")
                        .HasColumnType("integer");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HDMIVersion")
                        .HasColumnType("text");

                    b.Property<bool?>("HasBIOSSwitch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasLCDDisplay")
                        .HasColumnType("boolean");

                    b.Property<string>("Interface")
                        .HasColumnType("text");

                    b.Property<bool>("IsLHR")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiningPurpose")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRGB")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRGBSync")
                        .HasColumnType("boolean");

                    b.Property<int?>("LengthMM")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("text");

                    b.Property<int?>("MaxMonitors")
                        .HasColumnType("integer");

                    b.Property<string>("MaxResolution")
                        .HasColumnType("text");

                    b.Property<int>("MemoryBandwidthGBps")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryBusWidth")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryFrequencyMHz")
                        .HasColumnType("integer");

                    b.Property<int>("MemorySizeGB")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Microarchitecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PCILanes")
                        .HasColumnType("integer");

                    b.Property<string>("PowerConnectors")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("ROPs")
                        .HasColumnType("integer");

                    b.Property<int?>("RayTracingCores")
                        .HasColumnType("integer");

                    b.Property<bool>("RayTracingSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("RecommendedPSUWattage")
                        .HasColumnType("integer");

                    b.Property<int?>("TensorCores")
                        .HasColumnType("integer");

                    b.Property<int?>("TextureUnits")
                        .HasColumnType("integer");

                    b.Property<int?>("ThicknessMM")
                        .HasColumnType("integer");

                    b.Property<int?>("WeightGrams")
                        .HasColumnType("integer");

                    b.Property<int?>("WidthMM")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("VideoCardDetail");
                });

            modelBuilder.Entity("MercerStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsHit")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SKU")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MercerStore.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MercerStore.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("MercerStore.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.HasOne("MercerStore.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercerStore.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MercerStore.Models.CartProduct", b =>
                {
                    b.HasOne("MercerStore.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("cartProduct")
                        .HasForeignKey("MercerStore.Models.CartProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.CaseDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("Case")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.CaseDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.CoolingSystemDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("coolingSystem")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.CoolingSystemDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.MotherboardDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("Motherboard")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.MotherboardDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.PowerSupplyDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("PowerSupply")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.PowerSupplyDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.ProcessorDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("Processor")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.ProcessorDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.RamDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("Ram")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.RamDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.StorageDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("Storage")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.StorageDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.DescriptionProducts.VideoCardDetail", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithOne("VideoCard")
                        .HasForeignKey("MercerStore.Models.DescriptionProducts.VideoCardDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.Product", b =>
                {
                    b.HasOne("MercerStore.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MercerStore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MercerStore.Models.ProductImage", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.ProductVariant", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MercerStore.Models.Review", b =>
                {
                    b.HasOne("MercerStore.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercerStore.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MercerStore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MercerStore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MercerStore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MercerStore.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MercerStore.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MercerStore.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("MercerStore.Models.Product", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("Images");

                    b.Navigation("Motherboard");

                    b.Navigation("PowerSupply");

                    b.Navigation("Processor");

                    b.Navigation("ProductVariants");

                    b.Navigation("Ram");

                    b.Navigation("Reviews");

                    b.Navigation("Storage");

                    b.Navigation("VideoCard");

                    b.Navigation("cartProduct");

                    b.Navigation("coolingSystem");
                });
#pragma warning restore 612, 618
        }
    }
}
